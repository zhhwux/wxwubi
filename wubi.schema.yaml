super_comment:                 
  fuzhu_type: fuzhu       # 音码候选词辅助码调序和注释显示
#__include: set_chord_composer  #启用并击处理，不懂得不要开启就是了

schema:
  schema_id: wubi
  name: 万象五笔
  dependencies:
    - wanxiang_en        #英文输入
    - wanxiang_radical  
    - wanxiang_pro
    - wubi_lookup 
    - core2022
    - wubici

switches:
  - name: english_word   #中英单词
    states: [ 中, 英 ]
  - name: chaifen        #拆分滤镜
    states: [ 隐, 拆 ]   
  - name: pinyin         #拼音滤镜
    states: [ 字, pīn ]
  - name: charset_filter #常用字滤镜
    states: [ 常, 全 ]
  - name: wubi-sentence
    states: [关, 形句]
    reset: 1   
  - name: wubici
    states: [ 关, 形词 ]
    reset: 1   
  - name: wubi
    states: [ 关, 形单 ]
    reset: 1   
  - name: yin
    states: [ 关, 音码 ]
    reset: 0
  - name: super_tips
    states: [ off, tips ]
  - name: tone_display
    states: [ 关, 句pīn ] 
  - options: [ comment_off, fuzhu_hint ]   #拼音辅助码滤镜
    states: [ 注关, 辅开 ]
  - name: ascii_punct    #中英标点
    states: [ ¥, $ ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - options: [ s2s, s2t, s2hk, s2tw ]
    states: [ 简体, 通繁, 港繁, 臺繁 ]
  - name: emoji
    states: [ 🙃, 😄 ]
  - name: udpf_switch
    states: [ 关, U编]
  - name: chinese_english
    states: [ 关, 翻译 ]
  - name: prediction
    states: [ 关, 预测 ]


# 输入引擎
engine:
  processors:
    - predictor                            #联想处理器，与predictor顶层配置配合
    - chord_composer                       #并击处理器，与置顶参数：是否启用并击，选项配合使用
    #- lua_processor@*select_character     #以词定字，默认左中括号上屏一个词的前一个字，右中括号上屏一个词的后一个字
    - lua_processor@*temporary_wubi*P    #临时五笔码4码简词
    - lua_processor@*super_sequence*P      #手动排序，高亮候选 ctrl+j左移动 ctrl+k 右移动 ctrl+0 移除位移
    - lua_processor@*tone_fallback         #声调辅助回退，当你输入声调数字错误时，继续输入正确的而不用回退删除
    - lua_processor@*quick_symbol_text2   #快符引导以及重复上屏，配合quick_symbol_text顶层配置清单定义扩展按键
    - lua_processor@*super_tips            #超级提示模块：表情、简码、翻译、化学式、等等靠你想象
    - lua_processor@*userdb_sync_delete    #危险操作：通过输入 /del 触发,用于清理自定义同步目录下txt用户词典里被标记c<0的词条，操作步骤：必须先同步、再执行/del、再去部署刷新状态、再去同步回收词典，完成动作。
    - ascii_composer                       #处理英文模式及中英文切换
    - recognizer                           #与 matcher 搭配，处理符合特定规则的输入码，如网址、反查等 tags
    - key_binder                           #在特定条件下将按键绑定到其他按键，如重定义逗号、句号为候选翻页、开关快捷键等
    - lua_processor@*key_binder            #绑定按键扩展能力，支持正则扩展将按键生效情景更加细化
    - speller                              #拼写处理器，接受字符按键，编辑输入
    - punctuator                           #符号处理器，将单个字符按键直接映射为标点符号或文字
    - selector                             #选字处理器，处理数字选字键〔可以换成别的哦〕、上、下候选定位、换页
    - navigator                            #处理输入栏内的光标移动
    - express_editor                       #编辑器，处理空格、回车上屏、回退键
  segmentors:
    - ascii_segmentor                      #标识英文段落〔譬如在英文模式下〕字母直接上屛
    - matcher                              #配合 recognizer 标识符合特定规则的段落，如网址、反查等，加上特定 tag
    - abc_segmentor                        #标识常规的文字段落，加上 abc 这个 tag
    - affix_segmentor@wubi_add_user       #五笔码自造词加词 tag
    - affix_segmentor@add_user_dict        #音码自造词加词 tag
    - punct_segmentor                      #标识符号段落〔键入标点符号用〕加上 punct 这个 tag
    - fallback_segmentor                   #标识其他未标识段落，必须放在最后帮助tag模式切换后回退重新处理
  translators:
    - table_translator@wubi_wubici        #五笔单/五笔词/快符翻译器
    - predict_translator                   #预测候选的生成器
    - punct_translator                     #配合 punct_segmentor 转换标点符号
    - script_translator                    #脚本翻译器，用于拼音、粤拼等基于音节表的输入方案
    - lua_translator@*shijian              #农历、日期、节气、节日、时间、周、问候模板等等，触发清单看下文
    - lua_translator@*unicode              #通过输入大写U引导，并输入Unicode编码获得汉字输出
    - lua_translator@*number_translator    #数字、金额大写，通过输入大写R1234获得候选输出
    - lua_translator@*super_calculator     #超级计算器，Lua内查看高级用法
    - lua_translator@*new_statistics      #一个输入统计的脚本，以日、周、月、年、临时等维度的统计
    - table_translator@wanxiang_en         #挂接英文输入，参与中英混输
    - table_translator@cn_en               #中英混合词汇表导入
    - script_translator@wubi_user_dict   #五笔码自造词之使用词汇入口
    - script_translator@wubi_add_user    #五笔码自造词之制造词汇入口
    - script_translator@user_dict_set      #音码自造词之使用词汇入口
    - script_translator@add_user_dict      #音码自造词之制造词汇入口
    - lua_translator@*force_gc             #暴力 GC 降低内存
  filters:
    - lua_filter@*common_filter                    #字符集过滤
    - lua_filter@*autocap_filter                    #英文自动大写
    - reverse_lookup_filter@radical_reverse_lookup  #部件拆字滤镜，放在super_comment前面，进一步被超级注释处理以获得拼音编码+辅助码的提示
    - lua_filter@*super_preedit                     #输入码显示全拼并带上音调
    - simplifier@s2t                                #简繁切换通繁
    - simplifier@s2tw                               #简繁切换台繁
    - simplifier@s2hk                               #简繁切换港繁
    - lua_filter@*search@wanxiang_radical           #部件拆字辅码放在简繁转换之后
    - lua_filter@*remove_wubi_filter              #五笔码开关滤镜
    - lua_filter@*temporary_wubi*F                #临时五笔码4码简词
    - lua_filter@*super_sequence*F                  #手动排序，高亮候选 ctrl+j左移动 ctrl+k 右移动 ctrl+0 移除位移 
    - simplifier@emoji                              #Emoji
    - simplifier@chinese_english                    #中英翻译
    - lua_filter@*cand_comment                     #超级注释模块，支持错词提示、辅助码显示，部件组字读音注释，支持个性化配置和关闭相应的功能，详情搜索super_comment进行详细配置
    - lua_filter@*wubi_chaifen                     #拆分滤镜
    - simplifier@pinyin                            #拼音滤镜 
    - lua_filter@*unicode_display                  #Unicode编码显示
    - lua_filter@*text_formatting                   #给自定义用户词扩展一个换行:\n, 制表符：\t, 回车符：\r, 空格：\s
    - uniquifier                                    # 去重

predictor:
  db: wanxiang-lts-zh-predict.db
# 每次最大预测候选数
# 默认为 0，表示显示所有候选数
# 您可以将其设置为与 page_size 相同，这样 period 就不会触发下一页
  max_candidates: 5
# 最大连续预测次数
# 默认为 0，表示无限制
  max_iterations: 1
#shijian:仅仅作为提示使用，编码已经写死，引导适应性更高，如有需求lua中修改
#时间：osj 或者 /sj
#日期：orq 或者 /rq
#农历：onl 或者 /nl
#星期：oxq 或者 /xq
#今年第几周：oww 或者 /ww
#节气：ojq 或者 /jq
#日期+时间：ors 或者 /rs
#时间戳：ott 或者 /tt
#大写N日期：N20250315
#节日：ojr 或者 /jr
#问候模板：/day 或者 oday
#生日信息：/sr或者osr
birthday_reminder:  #日期格式：必须是4位数字，格式为MMDD（月份和日期），例如：1月27日 → 0127 ，#备注格式：在日期后添加逗号，然后添加任意文本作为备注，例如："0501,我的好朋友"，也可以无备注
  solar_birthdays:  # 公历生日, 姓名: "日期,备注" or 姓名: "日期"
    小明: "0501,准备礼物"
    大明: "0405"
  lunar_birthdays:  # 农历生日, 姓名: "日期,备注" or 姓名: "日期"
    小明: "0114"
    小红: "0815,农历中秋"
    

# Lua 配置：计算器触发关键字
calculator:
  trigger: "V" 


translator:
  dictionary: wubi
  enable_user_dict: false # 是否开启自动调频
  initial_quality: 99
  

wubi_user_dict:
  dictionary: wubi
  initial_quality: 0
  enable_completion: false
  enable_sentence: false
  comment_format:
  enable_user_dict: true
  user_dict: ti
  db_class: tabledb 

wubi_add_user:
  tag: wubi_add_user
  dictionary: wubi
  initial_quality: -1
  user_dict: ti
  enable_charset_filter: false # 是否开启字符集过滤
  enable_completion: true # 提前显示尚未输入完整码的字〔仅 table_translator 有效〕
  enable_encoder: true # 是否开启自动造词〔仅 table_translator 有效〕
  enable_sentence: true #  是否开启自动造句
  enable_user_dict: true
  encode_commit_history: false # 是否对已上屛词自动成词〔仅 table_translator 有效〕
  preedit_format:   
  comment_format:
  prefix: "`"
  tips: "〔自造词〕"

user_dict_set:
  dictionary: wanxiang_pro          # 挂载词库 wanxiang_pro.dict.yaml
  user_dict: zc
#  prism: double_pinyin          # 多方案共用一个词库时，为避免冲突，需要用 prism 指定一个名字。
  enable_completion: true  # 启用候选词补全
#  user_dict: zrm.userdb  # 用户词典的文件名称
  db_class: tabledb  #开启后就不会产生zrm.userdb这样的文件夹，会直接输出文本zrm.txt同时无法使用同步能力
  enable_user_dict: true # 是否开启自动调频
#  disable_user_dict_for_patterns:
#    - "^[a-z]{1,6}"    #基本的6码3字不调频
  enable_correction: false #是否开启自动纠错
  initial_quality: 3       # 初始质量拼音的权重应该比英文大
  spelling_hints: 50             # 将注释以词典字符串形式完全暴露，通过super_comment.lua完全接管，灵活配置。
  always_show_comments: true    # Rime 默认在 preedit 等于 comment 时取消显示 comment，这里强制一直显示，供super_comment.lua做判断用。
  comment_format: {comment}  #将注释以词典字符串形式完全暴露，通过super_comment.lua完全接管，灵活配置。
  preedit_format:               # preedit_format 影响到输入框的显示和“Shift+回车”上屏的字符
    
  # 音码前缀('引导)
add_user_dict:
  tag: add_user_dict
  dictionary: wanxiang_pro
  initial_quality: -1
  user_dict: zc
  enable_charset_filter: false # 是否开启字符集过滤
  enable_completion: true # 提前显示尚未输入完整码的字〔仅 table_translator 有效〕
  enable_encoder: true # 是否开启自动造词〔仅 table_translator 有效〕
  enable_sentence: true #  是否开启自动造句
  enable_user_dict: true
  encode_commit_history: false # 是否对已上屛词自动成词〔仅 table_translator 有效〕
  preedit_format:   
  comment_format:
  prefix: "'"
  tips: "〔音〕"
    
# 次翻译器，英文
wanxiang_en:
  dictionary: wanxiang_en     # 挂载词库 wanxiang_en.dict.yaml
  enable_sentence: false   # 禁止造句
  enable_user_dict: false  # 禁用用户词典，是否开启自动调频
  initial_quality: 1.1     # 初始权重
  comment_format:          # 自定义提示码
    - xform/.*//           # 清空提示码


# 中英混合词汇
cn_en:
  dictionary: ""
  user_dict: en_dicts/pinyin   
  db_class: stabledb
  enable_completion: true
  enable_sentence: false
  initial_quality: 0.5
  comment_format:
    - xform/^.+$//
    

#中文转英文
chinese_english:
  option_name: chinese_english
  opencc_config: chinese_english.json
  tips: char
  comment_format:
    - "xform/-/ /"
    
# 简繁切换
s2t:
  option_name: s2t
  opencc_config: s2t.json  # s2t.json | s2hk.json | s2tw.json | s2twp.json
  tips: none               # 转换提示: all 都显示 | char 仅单字显示 | none 不显示。
  tags: [ abc ]  # 限制在对应 tag，不对其他如反查的内容做简繁转换

s2hk:
  opencc_config: s2hk.json
  option_name: s2hk
  tags: [abc]

s2tw:
  opencc_config: s2tw.json
  option_name: s2tw
  tags: [abc]

recognizer:
  import_preset: default  # 从 default.yaml 继承通用的
  patterns:  # 再增加方案专有的：
    punct: "^/([0-9]|10|[A-Za-z]+)$"    # 响应 symbols.yaml 的 symbols
    wubi_add_user: "^`[A-Za-z/`']*$"   # 五笔码自造词
    add_user_dict: "^'[A-Za-z/`']*$"    # 音码前缀
    unicode: "^U[a-f0-9]+"              # 脚本将自动获取第 2 个字符 U 作为触发前缀，响应 lua_translator@unicode，输出 Unicode 字符
    number: "^R[0-9]+[.]?[0-9]*"        # 脚本将自动获取第 2 个字符 R 作为触发前缀，响应 lua_translator@number_translator，数字金额大写
    gregorian_to_lunar: "^N[0-9]{1,8}"  # 脚本将自动获取第 2 个字符 N 作为触发前缀，响应 lua_translator@lunar，公历转农历，输入 N20240115 得到「二〇二三年腊月初五」
    calculator: "^V.*$"                 # 计算器功能引导          

# 标点符号
# punctuator 下面有三个子项：
# 设置为一个映射，就自动上屏；设置为多个映射，如 '/' : [ '/', ÷ ] 则进行复选。
#   full_shape: 全角没改，使用预设值
#   half_shape: 标点符号全部直接上屏，和 macOS 自带输入法的区别是
#              '|' 是半角的，
#              '~' 是半角的，
#              '`'（反引号）没有改成 '·'（间隔号）。
#   symbols    Rime 的预设配置是以 '/' 前缀开头输出一系列字符，自定义的修改 symbols.yaml
punctuator:
  digit_separators: ":,."  #数字分隔符
  __include: new_symbols:/symbol_table         # 从 symbols.yaml 导入配置

#从 default 继承快捷键
key_binder:
  import_preset: default  # 从 default.yaml 继承通用的
  # Lua 配置: shijian.lua 的引导符，涉及：日期、时间、节日、节气、生日、问候模板等功能
  shijian_keys: ["/", "o"]
  # Lua 配置: 超级tips上屏按键
  tips_key: "slash"   #修改时候去default找
  search: "`"             # 辅码引导符，要添加到 speller/alphabet
  bindings:             # 也可以再增加方案专有的
    #- { when: composing, accept: Tab, send: '[' } ## 取消注释后：tab引导辅助码
    - { when: composing, accept: Control+w, send: Control+BackSpace }
#分号用于次选，微软、搜狗双拼不可启用
    - { when: has_menu, accept: semicolon, send: 2 }
#使用Control+e进入翻译模式
    - { when: has_menu, accept: "Control+e", toggle: chinese_english }
#使用快捷键Control+c拆分显示
    - { when: has_menu, accept: "Control+c", toggle: chaifen_switch }
#通过快捷键Control+t开启超级tips
    - { when: has_menu, accept: "Control+t", toggle: super_tips }
#通过快捷键Control+g开启字符集过滤
    - { when: has_menu, accept: "Control+g", toggle: charset_filter }
# 使用 tab 在不同音节之间跳转
    - { when: has_menu, accept: "Tab", send: "Control+Right" }
    - { when: composing, accept: "Tab", send: "Control+Right" }
#当tab第一个字补码正确后，可以使用Ctrl+tab进行上屏并依次补码
    - { when: composing, accept: "Control+Tab", send_sequence: '{Home}{Shift+Right}{1}{Shift+Right}' }
#启用光标回退至特定音节后、补充辅助码的功能。补充完辅助码后，可以再按一次tab回到整句检查
    - { when: composing, accept: Control+1, send_sequence: '{Home}{Shift+Right}' }
    - { when: composing, accept: Control+2, send_sequence: '{Home}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+3, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+4, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+5, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+6, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
    - { when: composing, accept: Control+7, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}' }
#当输入编码后发现没有词，则通过双击``进入造词模式而且不需要删除编码，这个功能与``直接引导相呼应相配合
    - { match: "^.*`$", accept: "`", send_sequence: '{BackSpace}{Home}{`}{`}{End}' }
#通过按下/发送/+1节约一个按键，不冲突的时候可以开启
    #- { match: "[a-z]{1,4}", accept: "/",  send_sequence: "/1" }
#① 翻页 , .
    # - { when: paging, accept: comma, send: Page_Up }
    # - { when: has_menu, accept: period, send: Page_Down }
#② 翻页 [ ]
    # - { when: paging, accept: bracketleft, send: Page_Up }
    # - { when: has_menu, accept: bracketright, send: Page_Down }
#③ 翻页 - =
    - { when: has_menu, accept: minus, send: Page_Up }
    - { when: has_menu, accept: equal, send: Page_Down }
# Option/Alt + ←/→ 切换光标至下/上一个拼音
    - { when: composing, accept: Alt+Left, send: Shift+Left }
    - { when: composing, accept: Alt+Right, send: Shift+Right }
    - { when: always, toggle: ascii_punct, accept: Control+Shift+3 }              # 切换中英标点
    - { when: always, toggle: ascii_punct, accept: Control+Shift+numbersign }     # 切换中英标点
    - { when: always, toggle: s2t, accept: Control+Shift+4 }       # 切换简繁
    - { when: always, toggle: s2t, accept: Control+Shift+dollar }  # 切换简繁


#通过快捷键Control+m开关英文单词
    - { when: has_menu, accept: "Control+m", toggle: english_word }
#通过快捷键Control+y开关音码
    - { when: has_menu, accept: "Control+y", toggle: yin }
#通过快捷键Control+q显示注音
    - { when: has_menu, accept: "Control+q", toggle: pinyin }
#通过快捷键Control+z开关拆分
    - { when: has_menu, accept: "Control+z", toggle: chaifen }
#使用快捷键Control+a开关五笔单
    - { when: has_menu, accept: "Control+a", toggle: wubi }
#通过快捷键Control+s开关五笔词
    - { when: has_menu, accept: "Control+s", toggle: wubici }
#通过快捷键Control+d开关五笔句
    - { when: has_menu, accept: "Control+d", toggle: wubi-sentence }


editor:
   bindings:
     space: confirm                        # 空格键：上屏候选项
     Return: commit_raw_input              # 回车键：上屏原始输入
     Control+Return: commit_script_text    # Ctrl+回车键：上屏变换后输入（经过 preedit转换的）
     Control+Shift+Return: commit_comment  # Ctrl+Shift+回车键：上屏 comment
     BackSpace: revert                     # 退格键：向前删除（撤消上次输入）
     Delete: delete                        # Delete 键：向后删除
     Control+BackSpace: back_syllable      # Ctrl+退格键：删除一个音节
     Control+Delete: delete_candidate      # Ctrl+Delete键：删除或降权候选项
     Escape: cancel                        # Esc 键：取消输入

# Emoji
emoji:
  option_name: emoji
  opencc_config: emoji.json
  inherit_comment: false  # 在 corrector.lua 及反查中，emoji 返回空注释
  

speller:
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA`;*/
  # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
  initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA;
  delimiter: " '"     
  #第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
  auto_select: true
  auto_select_pattern: ^;\w+ #自动上屏规则  对 [;] 引导的编码实行候选唯一自动上屏
  algebra:
    - derive/^(\w)(\w),(\w)(\w)$/$1$2/ # 纯双拼的情况
    - derive/^(\w)(\w),(\w)(\w)$/$1$2$3/ # 双拼+一位辅助码的情况
    - derive|^(\w)(\w),(\w)(\w)$|$1$2$3$4/| # 双拼+2位辅助码的情况 结尾加/
 
    - derive/[qwertyuiopasdfghjklzxcvbnm](.*)/*$1/
    - derive/(\w)[qwertyuiopasdfghjklzxcvbnm](\w)/$1*$2/
    - derive/(\w)(\w)[qwertyuiopasdfghjklzxcvbnm](\w)/$1$2*$3/
    - derive/(.*)[qwertyuiopasdfghjklzxcvbnm]/$1*/
    
__include: octagram   #启用语言模型
#语言模型
octagram:
  __patch:
    grammar:
      language: wanxiang-lts-zh-hans
      collocation_max_length: 8         #命中的最长词组
      collocation_min_length: 2         #命中的最短词组，搭配词频健全的词库时候应当最小值设为3避开2字高频词
      collocation_penalty: -10          #默认-12 对常见搭配词组施加的惩罚值。较高的负值会降低这些搭配被选中的概率，防止过于频繁地出现某些固定搭配。
      non_collocation_penalty: -12      #默认-12 对非搭配词组施加的惩罚值。较高的负值会降低非搭配词组被选中的概率，避免不合逻辑或不常见的词组组合。
      weak_collocation_penalty: -24     #默认-24 对弱搭配词组施加的惩罚值。保持默认值通常是为了有效过滤掉不太常见但仍然合理的词组组合。
      rear_penalty: -30                 #默认-18 对词组中后续词语的位置施加的惩罚值。较高的负值会降低某些词语在句子后部出现的概率，防止句子结构不自然。
    translator/contextual_suggestions: false
    translator/max_homophones: 5
    translator/max_homographs: 5
    
set_chord_composer:
  __patch:
    chord_composer:
      finish_chord_on_first_key_release: true #有一键被释放时立刻触发合成
      alphabet: qazwsxedcrfvtgbyhnujmik,ol.p;/ `
      algebra:
      # 符号和数字映射为大写字母，分离其转义干扰
        - xlit|;,./|ACXZ|
      # 左手编码包装
        - xform/([qwertasdfgzxcvb]+)/<$1>/
      # 右手编码包装
        - xform/([yuiophjklAnmCXZ]+)/<$1>/
      # 主处理区（尽量按照顺序排列）
        - xform=(<q>|<p>)=q=
        - xform=(<w>|<o>)=w=
        - xform=(<e>|<i>)=e=
        - xform=(<r>|<u>)=r=
        - xform=(<t>|<y>)=t=
        - xform=(<ef>|<ji>)=y=
        - xform=(<er>|<ui>)=u=
        - xform=(<we>|<io>)=i=
        - xform=(<wr>|<uo>)=o=
        - xform=(<qr>|<up>)=p=
        - xform=(<a>|<A>)=a=
        - xform=(<s>|<l>)=s=
        - xform=(<d>|<k>)=d=
        - xform=(<f>|<j>)=f=
        - xform=(<g>|<h>)=g=
        - xform=(<se>|<il>)=h=
        - xform=(<wf>|<jo>)=h=
        - xform=(<df>|<jk>)=j=
        - xform=(<sd>|<kl>)=k=
        - xform=(<sf>|<jl>)=l=
        - xform=(<z>|<Z>)=z=
        - xform=(<x>|<X>)=x=
        - xform=(<c>|<C>)=c=
        - xform=(<v>|<m>)=v=
        - xform=(<b>|<n>)=b=
        - xform=(<af>|<jA>)=n=
        - xform=(<cv>|<mC>)=m=
        - xform=(<dg>)=,=
        - xform=(<ag>)=.=
        - xform=(<hk>)=!=
        - xform=(<hA>)=?=
        - xform=(<xc>|<CX>)=,=
        - xform=(<xv>|<mX>)=.=
        - xform=(<zx>|<XZ>)=!=
        - xform=(<zv>|<mZ>)=?=
        - xform=(<ad>|<kA>)=;=
        - xform=(<as>|<lA>)=/=
        - xform=(<vb>|<nm>)=/=
        - xform=(<rt>|<yu>)=“=
        - xform=(<et>|<yi>)=”=
        - xform=(<qa>|<pA>)=~”=
        - xform=(<aw>|<oA>)=^”=
        - xform=(<ed>|<ik>)=!”=
        - xform=(<rf>|<uj>)=?”=
        - xform=(<ar>|<uA>)=:“=
        - xform=(<sr>|<ul>)=.”=
        - xform=(<qw>|<op>)=,“=
        - xform=(<zf>|<jZ>)=+=
        - xform=(<xf>|<jX>)=-=
        - xform=(<cf>|<jC>)=%=
        - xform=(<dr>|<uk>)=*=
        - xform=(<qe>|<ip>)=@=
        - xform=(<tg>)=:=
        - xform=(<yh>)=#=
        - xform=(<fg>)=~=
        - xform=(<hj>)=^=
      #  - xform=(<qt>|<yp>)==
      #  - xform=(<rt>|<yu>)==
      #  - xform=(<fg>|<hj>)==
      #  - xform=(<tg>|<yh>)==   
      #  - xform=(<qw>|<op>)==
  ###################################
        # 屏蔽未定义的指法
        - xform/<1>/ /
        - xform/<"1>/"/
        - xform/^.*<.+>.*$//
        # 符号转义的后处理
        - xform=，="""",=
        - xform=。="""".=
        - xform=！=""""!=
        - xform=？=""""?=


# ↓拼音滤镜
pinyin:
  opencc_config: pinyin.json
  option_name: pinyin
  show_in_comment: true #作为注解在后面显示
  comment_format:
    - "xform/&nbsp;/ /"
    - "xform/（/ /"
    - "xform/）/ /"
  tips: all


wubi_wubici:
  dictionary: wubici
  user_dict: custom_phrase/user
  db_class: stabledb
  enable_completion: false # 补全提示
  enable_sentence: false   
  initial_quality: 9999